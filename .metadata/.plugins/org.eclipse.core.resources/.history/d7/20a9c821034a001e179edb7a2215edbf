package a64Multithreading_in_Java_Part2;

/*
 * ekada thread ni ala create chestamu and ala run chestamu antea 
   Thread t = new Thread(); --> e statement thread create chaiyataniki use aavutundi.
   t.start(); --> e statement aa create ina thread run (or) start aavataniki use aavutundi.
   Thread.activeCount() --> e statement ani threads aneadi active lo unaiyao chupistundi.
   vako sari active lo 2 undochu or 3 undochu or 4 undochu or 5 undochu or 1 undochu.
   
 
 * ekada t.start(); ani rastamu nduku antea thread start aavataniki, e t.start(); anea command internal
   ga run() anea method ni invoke or hit chestundi, aa run method lo a code untea aa code run aavutadi.
   aa run lo manam code ala pedtamu. ekada oops concepts use avutundi, first thread anea class ni 
   extend cheasi danilo una run() method ni override anea concept use cheasi aa run() method ni 
   override cheasi manam a code rastea aa code un aavutadi.
   
   public Manager(String tName) {
		super(tName);
   }
   e thread ni name marchali antea manam vaka constructor ni create cheasi dani lo una super class ni 
   call chestea manam name change cheasukovachu.
	
 */

public class dOne_Way_of_using_of_multithread {

	public static void main(String[] args) {

		Employee emp = new Employee("T1");
		emp.start();
		
		Manager man = new Manager("T2");
		man.start();
		
		System.out.println(emp.activeCount());
	}
}

class Employee extends Thread {
	
	public Employee(String tName) {
		super(tName);
	}
	
	@Override
	public void run() {
		System.out.println("Hi Employee "+Thread.currentThread().getName()+ " >> " + Thread.currentThread().getId());
	}
}

class Manager extends Thread {
	
	public Manager(String tName) {
		super(tName);
	}
	
	@Override
	public void run() {
		System.out.println("Hi Manager "+Thread.currentThread().getName() + " >> " + Thread.currentThread().getId());
	}
}


